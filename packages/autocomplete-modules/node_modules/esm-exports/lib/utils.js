"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var Path = require("path");
var _ = require("lodash");
var njct_1 = require("njct");
exports.findFileExtensions = ['', '.ts', '.d.ts', '.js', '.tsx', '.jsx'];
exports.fileExtensions2 = ['.ts', '.js'];
exports.fileExtensions3 = ['.tsx', '.jsx'];
function findFile(name, dirname) {
    if (dirname === void 0) { dirname = '.'; }
    var file = null;
    for (var i = 0; i < exports.findFileExtensions.length; i++) {
        var extFile = name + exports.findFileExtensions[i];
        var testFile = Path.resolve(dirname, extFile);
        try {
            var stat = fs.statSync(testFile);
        }
        catch (e) {
            continue;
        }
        if (stat.isDirectory())
            continue;
        file = testFile;
        break;
    }
    return Promise.resolve(file);
}
exports.findFile = findFile;
function uniqEntryList(entryListCollection) {
    return _.chain(entryListCollection)
        .flatten()
        .uniqBy(function (entry) { return entry.hash(); })
        .value();
}
exports.uniqEntryList = uniqEntryList;
// TODO: Test case, map iterator returns false for all, and  directories and not watched
function fileList(basedir, mapIterator, File) {
    if (mapIterator === void 0) { mapIterator = function (path) { return path; }; }
    if (File === void 0) { File = njct_1.inject('fs', function () { return fs; }); }
    var result = [];
    return new Promise(function (resolve) {
        File.readdir(basedir, function (err, files) {
            // Ignore all errors.
            if (!(files && files.length > 0)) {
                return resolve([]);
            }
            var promises = [];
            files.forEach(function (file) {
                var testPath = Path.join(basedir, file).replace(/\\/g, '/');
                promises[promises.length] = new Promise(function (resolve) {
                    File.stat(testPath, function (err, stat) {
                        if (err) {
                            return resolve();
                        }
                        if (stat.isDirectory()) {
                            fileList(testPath, mapIterator)
                                .then(function (r) { return result = result.concat(r); })
                                .then(function () { return resolve(); })
                                .catch(function () { return resolve(); });
                            return;
                        }
                        testPath = mapIterator(testPath);
                        if (testPath) {
                            result.push(testPath);
                        }
                        resolve();
                    });
                });
            });
            var done = function () { return resolve(result); };
            Promise.all(promises)
                .then(done)
                .catch(done);
        });
    });
}
exports.fileList = fileList;
function findEntry(packageDir, _a) {
    var typings = _a.typings, main = _a.main;
    if (typings) {
        return findFile(typings, packageDir);
    }
    if (!main) {
        main = 'index';
    }
    return findFile(main, packageDir);
}
exports.findEntry = findEntry;
function readFile(filePath, options) {
    return new Promise(function (resolve, reject) {
        fs.readFile(filePath, options, function (err, data) {
            if (err) {
                return reject(err);
            }
            resolve(data);
        });
    });
}
exports.readFile = readFile;
function readJson(filepath, File) {
    if (File === void 0) { File = njct_1.inject('fs', function () { return fs; }); }
    return new Promise(function (resolve, reject) {
        File.readFile(filepath, 'utf8', function (err, data) {
            if (err) {
                return reject(err);
            }
            resolve(JSON.parse(data));
        });
    });
}
exports.readJson = readJson;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx1QkFBeUI7QUFDekIsMkJBQTZCO0FBRTdCLDBCQUE0QjtBQUM1Qiw2QkFBOEI7QUFFakIsUUFBQSxrQkFBa0IsR0FBRyxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDakUsUUFBQSxlQUFlLEdBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDakMsUUFBQSxlQUFlLEdBQUcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFFaEQsa0JBQXlCLElBQUksRUFBRSxPQUFhO0lBQWIsd0JBQUEsRUFBQSxhQUFhO0lBQ3hDLElBQUksSUFBSSxHQUFXLElBQUksQ0FBQztJQUN4QixHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLDBCQUFrQixDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ2pELElBQUksT0FBTyxHQUFHLElBQUksR0FBRywwQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzQyxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUM5QyxJQUFJLENBQUM7WUFDRCxJQUFJLElBQUksR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3JDLENBQUM7UUFBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ1QsUUFBUSxDQUFDO1FBQ2IsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUFDLFFBQVEsQ0FBQztRQUNqQyxJQUFJLEdBQUcsUUFBUSxDQUFDO1FBQ2hCLEtBQUssQ0FBQztJQUNWLENBQUM7SUFDRCxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNqQyxDQUFDO0FBZkQsNEJBZUM7QUFFRCx1QkFBOEIsbUJBQW1CO0lBQzdDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLG1CQUFtQixDQUFDO1NBQzlCLE9BQU8sRUFBUztTQUNoQixNQUFNLENBQUMsVUFBQSxLQUFLLElBQUksT0FBQSxLQUFLLENBQUMsSUFBSSxFQUFFLEVBQVosQ0FBWSxDQUFDO1NBQzdCLEtBQUssRUFBRSxDQUFDO0FBQ2pCLENBQUM7QUFMRCxzQ0FLQztBQUVELHdGQUF3RjtBQUN4RixrQkFBeUIsT0FBZSxFQUFFLFdBQW9DLEVBQUUsSUFBNkI7SUFBbkUsNEJBQUEsRUFBQSx3QkFBZSxJQUFZLElBQUssT0FBQSxJQUFJLEVBQUosQ0FBSTtJQUFFLHFCQUFBLEVBQUEsT0FBTyxhQUFNLENBQUMsSUFBSSxFQUFFLGNBQU0sT0FBQSxFQUFFLEVBQUYsQ0FBRSxDQUFDO0lBQ3pHLElBQUksTUFBTSxHQUFhLEVBQUUsQ0FBQztJQUMxQixNQUFNLENBQUMsSUFBSSxPQUFPLENBQVcsVUFBQSxPQUFPO1FBQ2hDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLFVBQUMsR0FBRyxFQUFFLEtBQUs7WUFDN0IscUJBQXFCO1lBQ3JCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQy9CLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDdkIsQ0FBQztZQUNELElBQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQztZQUNwQixLQUFLLENBQUMsT0FBTyxDQUFDLFVBQUEsSUFBSTtnQkFDZCxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO2dCQUM1RCxRQUFRLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFTLFVBQUEsT0FBTztvQkFDbkQsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsVUFBQyxHQUFHLEVBQUUsSUFBSTt3QkFDMUIsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzs0QkFDTixNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7d0JBQ3JCLENBQUM7d0JBQ0QsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQzs0QkFDckIsUUFBUSxDQUFDLFFBQVEsRUFBRSxXQUFXLENBQUM7aUNBQzFCLElBQUksQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUF6QixDQUF5QixDQUFDO2lDQUNwQyxJQUFJLENBQUMsY0FBTSxPQUFBLE9BQU8sRUFBRSxFQUFULENBQVMsQ0FBQztpQ0FDckIsS0FBSyxDQUFDLGNBQU0sT0FBQSxPQUFPLEVBQUUsRUFBVCxDQUFTLENBQUMsQ0FBQzs0QkFDNUIsTUFBTSxDQUFDO3dCQUNYLENBQUM7d0JBQ0QsUUFBUSxHQUFHLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQzt3QkFDakMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQzs0QkFDWCxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO3dCQUMxQixDQUFDO3dCQUNELE9BQU8sRUFBRSxDQUFDO29CQUNkLENBQUMsQ0FBQyxDQUFDO2dCQUNQLENBQUMsQ0FBQyxDQUFDO1lBQ1AsQ0FBQyxDQUFDLENBQUM7WUFDSCxJQUFNLElBQUksR0FBRyxjQUFNLE9BQUEsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFmLENBQWUsQ0FBQztZQUNuQyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQztpQkFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQztpQkFDVixLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUM7QUFyQ0QsNEJBcUNDO0FBRUQsbUJBQTBCLFVBQVUsRUFBRSxFQUFpQjtRQUFmLG9CQUFPLEVBQUUsY0FBSTtJQUNqRCxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ1YsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUNELEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNSLElBQUksR0FBRyxPQUFPLENBQUM7SUFDbkIsQ0FBQztJQUNELE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQ3RDLENBQUM7QUFSRCw4QkFRQztBQUVELGtCQUF5QixRQUFRLEVBQUUsT0FBTztJQUN0QyxNQUFNLENBQUMsSUFBSSxPQUFPLENBQUMsVUFBQyxPQUFPLEVBQUUsTUFBTTtRQUMvQixFQUFFLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUUsVUFBQyxHQUFHLEVBQUUsSUFBWTtZQUM3QyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUNOLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDdkIsQ0FBQztZQUNELE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNsQixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQVRELDRCQVNDO0FBRUQsa0JBQXlCLFFBQWdCLEVBQUUsSUFBNkI7SUFBN0IscUJBQUEsRUFBQSxPQUFPLGFBQU0sQ0FBQyxJQUFJLEVBQUUsY0FBTSxPQUFBLEVBQUUsRUFBRixDQUFFLENBQUM7SUFDcEUsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFNLFVBQUMsT0FBTyxFQUFFLE1BQU07UUFDcEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFFLFVBQUMsR0FBRyxFQUFFLElBQUk7WUFDdEMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDTixNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3ZCLENBQUM7WUFDRCxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQzlCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDO0FBVEQsNEJBU0MifQ==