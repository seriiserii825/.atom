"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Path = require("path");
var fs = require("fs");
var parse_1 = require("./parse");
var startsWith = require("lodash/startsWith");
var remove = require("lodash/remove");
var resolvePkg = require('resolve-pkg');
var directory_1 = require("./directory");
var utils_1 = require("./utils");
var parseModuleDefaults = {
    dirname: '.'
};
var SCOPE_TYPES = '@types/';
function findInnerModules(basename, cwd) {
    var p = Promise.resolve([]);
    // TODO: async
    fs.readdirSync(cwd)
        .map(function (name) { return ({ name: name, packageFile: Path.resolve(cwd, name, 'package.json') }); })
        .filter(function (_a) {
        var packageFile = _a.packageFile;
        return fs.existsSync(packageFile);
    })
        .map(function (_a) {
        var name = _a.name;
        return name;
    })
        .forEach(function (name) {
        var d = Path.resolve(cwd, name);
        p = p.then(function (result) { return directory_1.directory(d).then(function (entries) {
            entries.forEach(function (e) { return e.module = basename + "/" + name; });
            return result.concat(entries);
        }); });
    });
    return p;
}
function parseModule(name, options) {
    if (options === void 0) { options = parseModuleDefaults; }
    var dirname = options.dirname, module = options.module;
    var packageDir = resolvePkg(name, { cwd: dirname });
    if (!packageDir) {
        return Promise.resolve([]);
    }
    var isTypeDefinition = startsWith(name, SCOPE_TYPES);
    var filepath;
    return utils_1.readJson(Path.join(packageDir, 'package.json'))
        .then(function (pkgData) {
        return utils_1.findEntry(packageDir, pkgData);
    })
        .then(function (file) {
        if (!file) {
            return Promise.reject(undefined);
        }
        filepath = file;
        return utils_1.readFile(filepath, 'utf8');
    })
        .then(function (sourceText) {
        if (!module)
            module = name;
        return parse_1.parse(sourceText, { filepath: filepath, module: module })
            .then(function (entryList) {
            if (isTypeDefinition) {
                remove(entryList, function (e) { return startsWith(e.module, SCOPE_TYPES); });
            }
            return entryList;
        });
    })
        .catch(function (err) {
        return Promise.resolve([]);
    })
        .then(function (result) {
        return findInnerModules(name, packageDir)
            .catch(function (err) { return Promise.resolve([]); })
            .then(function (entries) { return result.concat(entries); });
    })
        .then(function (entryList) { return utils_1.uniqEntryList(entryList); });
}
exports.parseModule = parseModule;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2UtbW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3BhcnNlLW1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDJCQUE2QjtBQUM3Qix1QkFBeUI7QUFDekIsaUNBQWdDO0FBQ2hDLDhDQUFpRDtBQUNqRCxzQ0FBeUM7QUFFekMsSUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQzFDLHlDQUF3QztBQUN4QyxpQ0FBaUY7QUFPakYsSUFBTSxtQkFBbUIsR0FBRztJQUN4QixPQUFPLEVBQUUsR0FBRztDQUNmLENBQUM7QUFFRixJQUFNLFdBQVcsR0FBRyxTQUFTLENBQUM7QUFFOUIsMEJBQTBCLFFBQWdCLEVBQUUsR0FBVztJQUNuRCxJQUFJLENBQUMsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzVCLGNBQWM7SUFDZCxFQUFFLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQztTQUNkLEdBQUcsQ0FBQyxVQUFBLElBQUksSUFBSSxPQUFBLENBQUMsRUFBRSxJQUFJLE1BQUEsRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLGNBQWMsQ0FBQyxFQUFFLENBQUMsRUFBaEUsQ0FBZ0UsQ0FBQztTQUM3RSxNQUFNLENBQUMsVUFBQyxFQUFlO1lBQWIsNEJBQVc7UUFBTyxPQUFBLEVBQUUsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDO0lBQTFCLENBQTBCLENBQUM7U0FDdkQsR0FBRyxDQUFDLFVBQUMsRUFBUTtZQUFOLGNBQUk7UUFBTyxPQUFBLElBQUk7SUFBSixDQUFJLENBQUM7U0FDdkIsT0FBTyxDQUFDLFVBQUEsSUFBSTtRQUNULElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ2hDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFD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